func front_ptr(queue) { return car(queue); }
func rear_ptr(queue) { return cdr(queue); }
func set_front_ptr(queue, item) { set_car(queue, item); }
func set_rear_ptr(queue, item) { set_cdr(queue, item); }
func empty_queue?(queue) { return (null?(front_ptr(queue))); }
func make_queue() { cons(nil, nil); }

func front_queue(queue)
{
    if (empty_queue?(queue))
    {
        return print("FRONT called with an empty queue", queue);
    }
    else
    {
        return car(front_ptr(queue));
    }
}

func insert_queue(queue, item)
{
    var new_pair = cons(item, nil);
    if(empty_queue?(queue))
    {
        set_front_ptr(queue, new_pair);
        set_rear_ptr(queue, new_pair);
        return queue;
    }
    else
    {
        set_cdr(rear_ptr(queue), new_pair);
        set_rear_ptr(queue, new_pair);
        return queue;
    }
}

func delete_queue(queue)
{
    if(empty_queue?(queue))
    {
        return print("DELETE called with an empty queue", queue);
    }
    else
    {
        set_front_ptr(queue, (cdr(front_ptr(queue))));
        return queue;
    }
}

func make_wire()
{
    var signal_value = 0;
    var action_procedures = [];

    func set_my_signal(new_value)
    {
        if(signal_value != new_value)
        {
            set(signal_value, new_value);
            return call_each(action_procedures);
        }
        else
        {
            return "DONE";
        }
    }

    func accept_action_procedure(proc)
    {
        set(action_procedures, cons(proc, action_procedures));
        return proc();
    }

    func dispatch(m)
    {
        if (m == "'get_signal") { return signal_value; }
        else if (m == "'set_signal") { return set_my_signal; }
        else if (m == "'add_action") { return accept_action_procedure; }
        else { return print("Unknown operation __ WIRE", m); }
    }

    return dispatch;

}

func call_each(procedures)
{
    if (null?(procedures))
    {
        return "DONE";
    }
    else
    {
        c = car(procedures);
        c();
        return call_each(cdr(procedures));
    }
}

func get_signal(wire) { return wire("'get_signal"); }

func set_signal(wire, new_value)
{
    w = wire("'set_signal");
    return w(new_value);
}

func add_action(wire, action_procedure)
{
    w = wire("'add_action");
    return w(action_procedure);
}

func after_delay(delay, action)
{
    return add_to_agenda((delay + current_time(the_agenda)), action, the_agenda);
}

func propagate()
{
    if (empty_agenda? (the_agenda))
    {
        return "DONE";
    }
    else
    {
        var first_item = first_agenda_item(the_agenda);
        first_item();
        remove_first_agenda_item(the_agenda);
        return propogate();
    }
}

func make_time_segment(time, queue) { return cons(time, queue); }
func segment_time(s) { return car(s); }
func segment_queue(s) { return cdr(s); }
func make_agenda() { return [0]; }
func empty_agenda?(agenda) { return null?(segments (agenda)); }

func first_agenda_item (agenda)
{
    if (empty_agenda? (agenda))
    {
        return print ("Agenda is empty __ FIRST_AGENDA_ITEM", nil);

    }
    else
    {
        var first_seg = first_segment(agenda);
        set_current_time(agenda, segment_time(first_seg));
        return front_queue(segment_queue(first_seg));
    }
}

func remove_first_agenda_item(agenda)
{
    var q = segment_queue(first_segment(agenda));
    delete_queue(q);
    if(empty_queue?(q))
    {
        return set_segments(agenda, rest_segments(agenda));
    }
}

func add_to_agenda(time, action, agenda)
{
    func belongs_before?(segments)
    {
        if (null?(segments)) { return true; }
        if (time < segment_time(car(segments))) { return true; }
    }

    func make_new_time_segment(time, action)
    {
        var q = make_queue();
        insert_queue(q, action);
        return make_time_segment(time, q);
    }

    func add_to_segments(segments)
    {
        if(segment_time(car(segments)) == time)
        {
            return insert_queue(segment_queue(car(segments)), action);
        }
        else
        {
            var rest = cdr(segments);
            if (belongs_before?(rest))
            {
                set_cdr(
                    segments,
                    cons(
                        make_new_time_segment(time, action),
                        cdr(segments)
                        )
                    );
                return add_to_segments(rest);
            }
        }
    }

    var segs = segments(agenda);
    if(belongs_before?(segs))
    {
        if(null?(segs))
        {
            return set_segments(agenda, [make_new_time_segment(time, action)]);
        }
        else
        {
            return set_segments(agends, cons(make_new_time_segment(time, action), cdr(segs)));
        }
    }
    else
    {
        return add_to_segments(segs);
    }
}

func current_time(agenda) { return car (agenda); }
func set_current_time(agenda, time) { return set_car(agenda, time); }
func segments(agenda) { return cdr(agenda); }
func set_segments(agenda, segments) { return set_cdr(agenda, segments); }
func first_segment(agenda) { return car(segments(agenda)); }
func rest_segments(agenda) { return cdr(segments(agenda)); }

func and_gate(a1, a2, out)
{
    func and_action_procedure()
    {
        var new_value = logical_and(get_signal(a1), get_signal(a2));
        return after_delay(and_delay, lambda(){ set_signal(out, new_value); });
    }

    add_action(a1, and_action_procedure);
    add_action(a2, and_action_procedure);
    return "OK";
}

func logical_and(a1, a2)
{
    if(a1 == 1)
    {
        if(a2 == 1)
        {
            return 1;
        }
        else
        {
            return 0;
        }
    }
    else
    {
        return 0;
    }
}

func or_gate(o1, o2, out)
{
    func or_action_procedure()
    {
        var new_value = logical_or(get_signal(o1), get_signal(o2));
        return after_delay(or_delay, lambda(){ set_signal(out, new_value); });
    }

    add_action(o1, or_action_procedure);
    add_action(o2, or_action_procedure);
    return "OK";
}

func logical_or(o1, o2)
{
    if(o1 == 1)
    {
        return 1;
    }
    if(o2 == 1)
    {
        return 1;
    }

    return 0;
}

func inverter (in, out)
{
    func invert_input()
    {
        var new_value = logical_not(get_signal(in));
        return after_delay(inverter_delay, lambda(){ set_signal(out, new_value); });
    }
    add_action(in, invert_input);
    return "OK";
}

func logical_not(s)
{
    if(s == 0) { return 1; }
    if(s == 1) { return 0; }
    return print("Invalid signal", s);
}

func half_adder(a, b, s, c)
{
    var d = make_wire();
    var e = make_wire();
    or_gate(a, b, d);
    and_gate(a, b, c);
    inverter(c, e);
    and_gate(d, e, s);
    return "OK";
}

func full_adder(a, b, cin, sum, cout)
{
    var s = make_wire();
    var c1 = make_wire();
    var c2 = make_wire();
    half_adder(b, cin, s, c1);
    half_adder(a, s, sum, c2);
    or_gate(c1, c2, cout);
    return "OK";
}

var the_agenda = nil;
var and_delay = 0;
var or_delay = 0;
var inverter_delay = 0;

func wiretest()
{
    set(the_agenda, make_agenda());
    set(and_delay, 5);
    set(or_delay, 3);
    set(inverter_delay, 1);

    var x0 = make_wire();
    var y0 = make_wire();
    var o0 = make_wire();
    var carry = make_wire();
    print(full_adder(x0, y0, 0, o0, carry));
    set_signal(x0, 1);
    propagate();
    print("X        = 0", get_signal(x0));
    print("Y        = 0", get_signal(y0));
    print("Result is: ", get_signal(o0));
    set_signal(y0, 1);
    propagate();
    print("X        = 0", get_signal(x0));
    print("Y        = 0", get_signal(y0));
    print("Result is: ", get_signal(o0));
}