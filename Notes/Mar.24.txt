(define scons cons-stream)
(define scar stream-car)
(define scdr stream-cdr)

(define (ints-from n)
    (cons-stream n (ints-from (+ n 1)))
)

(define (sdisplay s n)
    (cond
        ((= n 0) (print "...\n"))
        (else
            (print (stream-car s) " ")
            (sdisplay (stream-cdr s) (- n 1))
        )
    )
)

(define s (ints-from 2))
; (sdisplay s 10)
; (sdisplay s 100)

(define (add-streams s t)
    (cons-stream
        (+ (stream-car s) (stream-car t))
        (add-streams (stream-cdr s) (stream-cdr t))
    )
)

(define (div-streams s t)
    (cons-stream
        (/ (stream-car s) (* 1.0 (stream-car t)))
        (div-streams (stream-cdr s) (stream-cdr t))
    )
)

; (sdisplay (add-streams s s) 10)

(define ones (scons 1 ones))
(define alt-ones (scons 1 (scons -1 alt-ones)))
(define twos (scons 2 twos))
(define odds (scons 1 (add-streams twos odds)))
(define ints (scons 1 (add-streams ones ints)))
(define fibs (scons 0 (scons 1 (add-streams fibs (scdr fibs)))))

(define (sremove p? s)
    (if (p? (scar s))
        (sremove p? (scdr s))
        (scons (scar s) (sremove p? (scdr s)))
    )
)

(define (divides? x y) (= (% x y) 0))

; Checks our sremove routine
; (sdisplay (sremove (lambda (x) (divides? x 3)) ints) 20)

(define (sieve s)
    (scons
        (scar s)
        (sieve (sremove (lambda (x) (divides? x (scar s))) (scdr s)))
    )
)

; (sdisplay ones 10)
; (sdisplay ints 10)
; (sdisplay fibs 10)
; (sdisplay (sieve (scdr ints)) 10)

; PI/4 = 1 - 1/3 + 1/5 - 1/7 + 1/9 ...
; Need alt-ones / odds
(define pi-by-4-stream (div-streams alt-ones odds))

; (sdisplay pi-by-4-stream 10)

; Partial Sum
(define (psum s)
    (scons
        (scar s)
        (psum
            (scons
                (+ (scar s) (scar (scdr s)))
                (scdr (scdr s))
            )
        )
    )
)

; (sdisplay (psum pi-by-4-stream) 50)

(define (sscale s x)
    (scons
        (* x (scar s))
        (sscale (scdr s) x)
    )
)

; (sdisplay (sscale (psum pi-by-4-stream) 4) 50)

(define (euler-transform s)
    (define s0 (scar s))
    (define s1 (scar (scdr s)))
    (define s2 (scar (scdr (scdr s))))
    (scons
        (- s2 (/ (^ (- s2 s1) 2) (+ s0 (* -2 s1) s2)))
        (euler-transform (scdr s))
    )
)

; (sdisplay (euler-transform (sscale (psum pi-by-4-stream) 4)) 10)

(define (tableau s)
    (scons
        (scar s)
        (scar (tableau (euler-transform s)))
    )
)

; (sdisplay (tableau (sscale (psum pi-by-4-stream) 4)) 10)