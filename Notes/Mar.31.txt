; =============================================================================
; Test Info
; =============================================================================
; Questions on recognizer/parser/parse trees
; Sample Qs from web
; Previous Exams on web


; =============================================================================
; Streams
; =============================================================================
; Resuming from Mar.24.txt
(include "Mar.24.txt")
; (sdisplay (tableau (sscale (psum pi-by-4-stream) 4)) 10)

; Redefine tableau
(define (tableau xform s) (scons s (tableau xform (xform s))))

; Stream-map
(define (smap f s) (scons (f (scar s)) (smap f (scdr s))))

; Gives div by 0 error
; (sdisplay (sscale (smap scar (tableau euler-transform (psum pi-stream))) 4) 10)

; Solution
(define (euler-transform s)
    (define s0 (scar s))
    (define s1 (scar (scdr s)))
    (define s2 (scar (scdr (scdr s))))
    (define denominator (+ s0 ( * -2 s1) s2))
    (if (= denominator 0)
        (scons s0 (euler-transform (scdr s)))
        (scons
            (- s2 (/ (^ (- s2 s1) 2) denominator))
            (euler-transform (scdr s))
        )
    )
)

; No Error
; (sdisplay (sscale (smap scar (tableau euler-transform (psum pi-by-4-stream))) 4) 10)

; We want to generate all pairs (j, i) from i = 0->infinity and j  = 0->i
; for(i = 0; i < infinity; ++i):
;     for(j = 0; j <= i; ++j):
;         print("(%d, %d)", j, i)

; We will look at this like
; (0,0) (0,1) (0,2) (0,3)
;   .   (1,1) (1,2) (1,3)
;   .     .   (2,2) (2,3)
;   .     .     .   (3,3)
; We want to call like (pairs ints ints)

; We need a shuffle
(define (sshuffle s t)
    (scons
        (scar s)
        (sshuffle t (scdr s))
    )
)

(define (pairs s t)
    (scons
        (list (scar s) (scar t))
        (sshuffle
            (smap (lamda (x) (list (scar s) x)) (scdr t))
            (pairs (scdr s) (scdr t))
        )
    )
)

; To do all pairs of integers
; ??