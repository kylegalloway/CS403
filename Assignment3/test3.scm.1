(include "assign3.scm")

(println "Assignment 3 Test Script: VERSION 1\n")

(println "author...\n")
(author)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests---------------------\n")
        (inspect (define a 3))
        (inspect (level 'a))
        (println "    [it should print zero]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 2:")
(include "pretty.lib")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests---------------------\n")
        (inspect (define (f a b c) (+ (+ a b) c)))
        (cache f)
        (pretty f)
        (println "    [it should have + signs replaced]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests---------------------\n")
        (inspect (define p (PRQ <)))
        (inspect (p 'insert 111 0))
        (inspect (p 'item))
        (println "    [it should be 111]")
        (inspect (p 'rank))
        (println "    [it should be 0]")
        (inspect (p 'size))
        (println "    [it should be 1]")
        (inspect (p 'empty?))
        (println "    [it should be #f]")
        (inspect (p 'remove))
        (inspect (p 'empty?))
        (println "    [it should be #t]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests---------------------\n")
        (set! the-agenda (make-agenda))
        (set! and-delay 5)
        (set! or-delay 3)
        (set! inverter-delay 1)
        (define in0 (make-wire))
        (define in1 (make-wire))
        (define out0 (make-wire))
        (define out1 (make-wire))
        (define out2 (make-wire))
        (define out3 (make-wire))
        (define carry (make-wire))
        (inspect (add4
            (list in0 in0 in0 in0)
            (list in1 in1 in1 in1)
            (list out3 out2 out1 out0)
            carry
            ))
        (inspect (set-signal! in0 1))
        (inspect (set-signal! in1 1))
        (inspect (propagate))
        (inspect (get-signal carry))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)


(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests---------------------\n")
        (inspect (define m (mmutex 3)))
        (inspect ((m'p)))
        (println "    [it should be the symbol ACQUIRED]")
        (inspect ((m'v)))
        (println "    [it should be the symbol RELEASED]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests---------------------\n")
        (inspect (stream-car (pf-3-11-17)))
        (println "    [it should be 3]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests---------------------\n")
        (define ones (cons-stream 1 ones))
        (inspect (stream-car (saverage ones)))
        (println "    [it should be 1.0000000000]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests---------------------\n")
        (inspect (stream-car mystery))
        (println "    [it should be 1.0000000000]")
        (inspect (stream-car mystery1))
        (println "    [it should be 1.0000000000]")
        (inspect (stream-car mystery2))
        (println "    [it should be 2.5000000000]")
        (inspect (stream-car mystery3))
        (println "    [it should be 1.0000000000]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests---------------------\n")
        (define (sref s n)
            (if (= n 0)
                (scar s)
                (sref (scdr s) (- n 1))
                )
            )
        (inspect (stream-car (ramanujan)))
        (println "    [it should be 1729]")
        (inspect (sref (ramanujan) 20))
        (println "    [it should be a number]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

;{
(print "PROBLEM 10:")
(if (defined? 'run10 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run10)
        (println "\n-------my tests---------------------\n")
        )
    (println " NOT IMPLEMENTED")
    )
;}
(println)
(author)
(println)
(println "this test script ran to completion\n");
