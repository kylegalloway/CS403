(include "assign1.scm")

(println "Test Script: VERSION 2\n")

(println "author...\n")
(author)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests---------------------\n")
        (println "    No testing for this task")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 2:")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests---------------------\n")
        (inspect (zeno_cost 0.000001 55 .25))
        (println "    [it should be 7.0]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests---------------------\n")
        (inspect ((mandelbrot-iter 100) 0.5 0.5))
        (println "    [it should be 5]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests---------------------\n")
        (inspect (root3 1))
        (println "    [it should be 1 or really close to 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)


(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests---------------------\n")
        (println "(crazyTriangle 1 1 1)")
        (crazyTriangle 1 1 1)
        (println "    [a completely left-justified 1 should have been printed]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests---------------------\n")
        (inspect (((((oppy +) 1) +) 1) 1))
        (println "    [it should be 3]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests---------------------\n")
        (inspect (w (lambda (x) 1) 0))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests---------------------\n")
        (inspect (halve 2))
        (println "    [it should be 1]")
        (inspect (egypt* 1 1))
        (println "    [it should be 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests---------------------\n")
        (inspect (mystery 0))
        (println "    [it should be 1.000000]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 10:")
(if (defined? 'run10 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run10)
        (println "\n-------my tests---------------------\n")
        (inspect (ramanujan 0 3))
        (println "    [it should be 0]")
        (inspect (iramanujan 0 3))
        (println "    [it should be 0]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(author)
