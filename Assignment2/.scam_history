(apply + (list 0 1 2 3 4 5))
(apply + (list (backquote (1 2)) 3 4 5))
q
(define (f a b c) (+ a b c))
(get (quote parameters) f)
(length (get (quote parameters) f))
q
(define (infix->prefix Expr) (if (is? Expr (quote CONS)) (if (null? (cdr Expr)) (car Expr) (list (cadr Expr) (infix->prefix (car Expr)) (infix->prefix (cddr Expr)))) Expr))
(infix->prefix (quote (2 + 3 * a ^ 5 + b)))
(infix->prefix (quote (2 + 3 * a * 5 + b)))
d
q
(define L (quote (1 2)))
(pair? L)
(list? L)
(define LL (quote (1 2 3 4)))
(pair? LL)
(length L)
(length LL)
q
(println (append 1 (append 2 (quote ))))
(println (list 1 (list 2 (quote))))
(println (list 1 (list 2 (quote ))))
q
q
(define L (quote (1 2 3 4)))
(cadr L)
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cadr L) (append (append (append newL (quote l)) (rewrite-iter (car L) (quote ))) (quote r))) (rewrite-iter (cdr L) (append (append newL (quote l)) (car L)))))) (rewrite-iter L (quote )))
(rewrite L)
(rewrite L)
q
q
(rewrite L)
(define L (quote (1 2 3 4)))
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cadr L) (append (append (append newL (quote l)) (rewrite-iter (car L) (quote))) (quote r))) (rewrite-iter (cdr L) (append (append newL (quote l)) (car L)))))) (rewrite-iter L (quote)))
(rewrite L)
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cadr L) (append (append (append newL (quote l)) (rewrite-iter (car L) (quote ))) (quote r))) (rewrite-iter (cdr L) (append (append newL (quote l)) (car L)))))) (rewrite-iter L (quote )))
(rewrite L)
(println (append 1 (append 2 (quote))))
(println (append 1 (append 2 (list))))
(println (append (append (list) 2) 1))
(println (cons (cons (list) 2) 1))
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cadr L) (append (append (append newL (list (quote l))) (rewrite-iter (car L) (quote ))) (list (quote r)))) (rewrite-iter (cdr L) (append (append newL (quote l)) (car L)))) L)) (rewrite-iter L (quote )))
(rewrite L)
q
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cadr L) (append (append (append newL (list (quote l))) (rewrite-iter (car L) (quote ))) (list (quote r)))) (rewrite-iter (cdr L) (append (append newL (list (quote l))) (car L)))) L)) (rewrite-iter L (quote )))
(define L (quote (1 2 3)))
(rewrite L)
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cadr L) (append (append (append newL (list (quote l))) (rewrite-iter (car L) (quote ))) (list (quote r)))) (rewrite-iter (cdr L) (append (append newL (list (quote l))) (list (car L))))) L)) (rewrite-iter L (quote )))
(rewrite L)
(define (rewrite L) (define (rewrite-iter L newL) (if (list? L) (if (list? (car L)) (rewrite-iter (cdr L) (append (append (append newL (list (quote l))) (rewrite-iter (car L) (quote ))) (list (quote r)))) (rewrite-iter (cdr L) (append (append newL (list (quote l))) (list (car L))))) L)) (rewrite-iter L (quote )))
(rewrite L)
q
(define L (quote (1 2 3)))
(L)
L
(define (replace-paren L) (define (replace-iter L newL) (if (list? L) (if (not (list? (car L))) (replace-iter (cdr L) (append (append newL (quote l)) (car L))) (replace-iter (cdr L) (append (append newL (quote l)) (replace-iter (car L))))) (append newL (quote r)))))
(replace-paren L)
println
(replace-paren L)
(println (replace-paren L))
(println (replace-paren L))
q
q
q
(reduce-right list (quote ) (quote (1 2 3 4)))
q
q
(operator? +)
(symbol? +)
(symbol? (quote +))
(symbol? 1)
q
