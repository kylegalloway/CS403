(include "assign2.scm")

(println "Assignment 2 Test Script: VERSION 1\n")

(println "author...\n")
(author)

(print "PROBLEM 1:")
(if (defined? 'run1 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run1)
        (println "\n-------my tests---------------------\n")
        (loop (lambda (x) (println 1)) '(0 1))
        (println "    [it should print one 1]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 2:")
(if (defined? 'run2 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run2)
        (println "\n-------my tests---------------------\n")
        (inspect (define (f a b c) (+ a b c)))
        (inspect ((curry f 3 4) 5))
        (println "    [it should be 12]")
        (inspect ((curry f 3) 4 5))
        (println "    [it should be 12]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
    
(print "PROBLEM 3:")
(if (defined? 'run3 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run3)
        (println "\n-------my tests---------------------\n")
        (inspect (eval (infix->prefix '(1 + 1)) this))
        (println "    [it should be 2]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 4:")
(if (defined? 'run4 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run4)
        (println "\n-------my tests---------------------\n")
        (inspect (no-locals '(define (f) (define x 3) 1)))
        (println "    [it should be (define (f) ((lambda (x) 1) 3))")
        )
    (println " NOT IMPLEMENTED")
    )
(println)


(print "PROBLEM 5:")
(if (defined? 'run5 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run5)
        (println "\n-------my tests---------------------\n")
        (inspect (convert '(lambda (a b) 1)))
        (println "    [it should be (lambda (a) (lambda (b) 1))]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 6:")
(if (defined? 'run6 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run6)
        (println "\n-------my tests---------------------\n")
        (inspect (reverse* '(a)))
        (println "    [it should be (a)]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 7:")
(if (defined? 'run7 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run7)
        (println "\n-------my tests---------------------\n")
        (inspect (dot-product '(0) '(0)))
        (println "    [it should be 0]")
        (inspect (transpose '((0))))
        (println "    [it should be '((0))]")
        (inspect (matrix-*-vector '((0)) '(0)))
        (println "    [it should be '(0)]")
        (inspect (matrix-*-matrix '((0)) '((0))))
        (println "    [it should be '((0))]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 8:")
(if (defined? 'run8 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run8)
        (println "\n-------my tests---------------------\n")
        (inspect (define t0 (node 5 nil nil)))
        (inspect (define t1 (insertInTree t0 2)))
        (inspect (define t2 (insertInTree t1 8)))
        (displayTree t2 "")
        (println "    [it should be root 5, left child 2, right child 8]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 9:")
(if (defined? 'run9 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run9)
        (println "\n-------my tests---------------------\n")
        (inspect (big+ '(0) '(0)))
        (println "    [it should be (0)]")
        (inspect (big- '(0) '(0)))
        (println "    [it should be (0)]")
        (inspect (big* '(0) '(0)))
        (println "    [it should be (0)]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)

(print "PROBLEM 10:")
(if (defined? 'run10 this)
    (begin
        (println "\n\n------your tests--------------------\n")
        (run10)
        (println "\n-------my tests---------------------\n")
        (inspect (+ 0 0))
        (println "    [it should be 0]")
        (inspect (- 0 0))
        (println "    [it should be 0]")
        (inspect (* 0 0))
        (println "    [it should be 0]")
        (inspect (+ '(0) '(0)))
        (println "    [it should be 0]")
        (inspect (- '(0) '(0)))
        (println "    [it should be 0]")
        (inspect (* '(0) '(0)))
        (println "    [it should be 0]")
        )
    (println " NOT IMPLEMENTED")
    )
(println)
(author)
(println)
(println "this test script ran to completion\n");
